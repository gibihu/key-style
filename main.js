/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HighlightPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableFeature: true,
  textOption: "Hello, Obsidian!",
  DetectPlusToColor: "green",
  action: [
    {
      id: 1,
      detect: "++",
      addDetect: true,
      style: "color: #00db31;",
      position: "start"
    },
    {
      id: 2,
      detect: "--",
      addDetect: true,
      style: "color: red;",
      position: "start"
    }
  ]
};
var HighlightPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("[HighlightPlugin] Loaded!");
    await this.loadSettings();
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerDomEvent(document, "keyup", (event) => {
      this.handleTyping();
    });
    this.registerDomEvent(document, "input", () => {
      this.handleTyping();
    });
    this.app.workspace.onLayoutReady(async () => {
      const cssPath = this.app.vault.adapter.getResourcePath(
        this.manifest.dir + "/style.css"
      );
      const cssText = await fetch(cssPath).then((res) => res.text());
      const styleEl = document.createElement("style");
      styleEl.textContent = cssText;
      document.head.appendChild(styleEl);
      console.log("CSS Loaded via <style> tag");
    });
  }
  // save and load settings
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.handleTyping();
  }
  // main freature
  handleTyping() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf)
      return;
    const editor = activeLeaf.view.sourceMode.cmEditor;
    if (!editor)
      return;
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    this.settings.action.forEach((action) => {
      const escapedDetect = action.detect.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      const regex = new RegExp(`^${escapedDetect}\\s+(.+)`);
      if (regex.test(line)) {
        const highlightedText = line.replace(regex, (_, text) => {
          if (action.position === "start") {
            return `<span style="${action.style}">${action.addDetect ? action.detect + " " : ""}${text}</span>`;
          } else if (action.position === "end") {
            return `${text}<span style="${action.style}${action.addDetect ? " " + action.detect : ""}"></span>`;
          } else {
            return text;
          }
        });
        editor.replaceRange(highlightedText, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
      }
    });
  }
  onunload() {
    console.log("[HighlightPlugin] Unloaded!");
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "My Plugin Settings" });
    containerEl.createEl("h3", { text: "Actions" });
    new import_obsidian.Setting(containerEl).setName("Add New Action").setDesc("Add a new action to the list.").addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS);
      await this.plugin.saveSettings();
      this.display();
    })).addButton(
      (button) => button.setButtonText("Add").setCta().onClick(async () => {
        this.plugin.settings.action.push({
          id: this.plugin.settings.action.length + 1,
          detect: "",
          addDetect: true,
          style: "color: white",
          position: "start"
        });
        await this.plugin.saveSettings();
        this.display();
      })
    );
    this.plugin.settings.action.forEach((action, index) => {
      const actionSetting = new import_obsidian.Setting(containerEl);
      actionSetting.settingEl.classList.add("flex", "flex-col", "items-start");
      actionSetting.setName(`Action ${index + 1}`);
      const inputContainer = actionSetting.controlEl;
      inputContainer.classList.add("flex", "gap-2", "overflow-auto", "w-full", "h-full", "p-2");
      actionSetting.addText(
        (text) => text.setPlaceholder("Detect").setValue(action.detect).then((textEl) => textEl.inputEl.classList.add(`w-20`)).onChange(async (value) => {
          this.plugin.settings.action[index].detect = value;
          await this.plugin.saveSettings();
        })
      );
      actionSetting.addText(
        (text) => text.setPlaceholder("Style").setValue(action.style).then((textEl) => textEl.inputEl.classList.add(`w-full`)).onChange(async (value) => {
          this.plugin.settings.action[index].style = value;
          await this.plugin.saveSettings();
        })
      );
      actionSetting.addDropdown(
        (dropdown) => dropdown.addOption("start", "Start").addOption("end", "End").setValue(action.position).then((dropdownEl) => dropdownEl.selectEl.classList.add("w-20")).onChange(async (value) => {
          this.plugin.settings.action[index].position = value;
          await this.plugin.saveSettings();
        })
      );
      actionSetting.addToggle(
        (toggle) => toggle.setTooltip("Add detect text to the highlighted text.").setValue(action.addDetect).onChange(async (value) => {
          this.plugin.settings.action[index].addDetect = value;
          await this.plugin.saveSettings();
        })
      );
      actionSetting.addButton(
        (button) => button.setButtonText("\u274C").onClick(async () => {
          this.plugin.settings.action.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        })
      );
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
